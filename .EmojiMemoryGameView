//
//  EmojiMemoryGameView.swift
//  TheCardGame
//
//  Created by David Onica on 04.08.2023.
//

import SwiftUI
struct EmojiMemoryGameView: View {
    @ObservedObject var game: EmojyMemoryGame
    
    @Namespace private var dealingNameSpace
    var body: some View {
        ZStack(alignment: .bottom){
            
            
            VStack{
                gameBody
                HStack{
                    restart
                    Spacer()
                    shuffle
                }
                .padding(.horizontal)
            }
            decBody
        }
        .padding()
    }
    @ State private var dealt = Set<Int>()
    private func deal(_ card: EmojyMemoryGame.Card){
        dealt.insert(card.id)
    }
    private func isunDealt(_ card: EmojyMemoryGame.Card) -> Bool {
         !dealt.contains(card.id )
    }
    private func dealtAnimation(for card: EmojyMemoryGame.Card) -> Animation{
        var delay = 0.0
        if let index = game.cards.firstIndex(where: {$0.id == card.id}){
            delay = Double(index) * (CardConstants.totalDealtDuration / Double(game.cards.count))
        }
        return Animation.easeInOut(duration: CardConstants.dealDuration).delay(delay)
    }
    private func zIndex(of card: EmojyMemoryGame.Card) -> Double{
        -Double(game.cards.firstIndex(where: {$0.id == card.id}) ?? 0)
    }
    var gameBody: some View{
        AspectVGrid (items : game.cards, aspectRatio: 2/3) { card in
            if isunDealt(card) || (card.isMatched && !card.IsFaceUp){
                Color.clear
            }else{
                CardView(card)
                    .matchedGeometryEffect(id: card.id, in: dealingNameSpace)
                    .padding(4)
                    .transition(AnyTransition.asymmetric(insertion: .identity, removal: .scale))
                    .zIndex(zIndex(of: card))
                    .onTapGesture {
                        withAnimation{
                            game.choose(card)
                        }
                    }
            }
        }
        
       
        .foregroundColor(CardConstants.color)
    }
    var decBody: some View{
        ZStack{
            ForEach(game.cards.filter(isunDealt)){card  in
                CardView (card)
                    .matchedGeometryEffect(id: card.id, in: dealingNameSpace)
                    .transition(AnyTransition.asymmetric(insertion: .opacity, removal: .identity))
                    .zIndex(zIndex(of: card))
            }
        }
        .frame(width: CardConstants.undealtWidth, height: CardConstants.undealtHeight)
        .foregroundColor(CardConstants.color)
        .onTapGesture{
                    for card in game.cards{
                        withAnimation(dealtAnimation(for: card )){
                        deal(card)
                    }
                }
            }
        }
    
    var shuffle: some View{
        
        Button("Shuffle"){
            withAnimation{
                game.Shuffle()
            }
        }
    }
    var restart : some View{
        Button("Restart"){
            withAnimation{
                dealt = []
                game.restart()
                
            }
        }
    }
    private struct CardConstants{
        static let color = Color.red
        static let aspectRaptio: CGFloat = 2/3
        static let dealDuration: Double = 0.5
        static let totalDealtDuration: Double = 2
        static let undealtHeight: CGFloat = 90
        static let undealtWidth = undealtHeight * aspectRaptio
    
    }
    
    
    struct CardView: View{
        @State private var animatedBonusRemaining: Double = 0
        
        let card: EmojyMemoryGame.Card
        init(_ givenCard: EmojyMemoryGame.Card){
            card = givenCard
        }
        var body: some View{
            GeometryReader {geometry in
                Group{
                    
                
                    ZStack{
                        if card.isConsumingBonusTime{
                            Pie(startAngle: (Angle(degrees: 0-90)) , endAngle: Angle(degrees: (1-animatedBonusRemaining )*360-90))
                                .onAppear{
                                    animatedBonusRemaining = card.bonusRemaining
                                    withAnimation(.linear(duration: card.bonusRemaining)){
                                        animatedBonusRemaining  = 0
                                    }
                                }
                        }else{
                            Pie(startAngle: (Angle(degrees: 0-90)) , endAngle: Angle(degrees: (1-card.bonusRemaining)*360-90))
                        }
                        
                    }
                    .padding(5).opacity(0.5)
                    Text(card.content)
                        .rotationEffect(Angle(degrees: card.isMatched ? 360 : 0))
                        .animation(Animation.linear(duration: 1).repeatForever(autoreverses: false ))
                        .font(Font.system(size: DrawingConstants.fontSize))
                        .scaleEffect(scale(thatFits:geometry.size))
                }
                .cardify(IsFaceUp: card.IsFaceUp)
            }
        }
        
        
        
        private func scale (thatFits  size: CGSize) -> CGFloat{
            min(size.width, size.height) / (DrawingConstants.fontSize / DrawingConstants.fontScale)
        }
        private struct DrawingConstants{
            static let fontScale: CGFloat = 0.5
            static let fontSize: CGFloat = 32
        }
    }
    
    
    
    struct ContentView_Preview: PreviewProvider {
        static var previews: some View {
            let game = EmojyMemoryGame()
            EmojiMemoryGameView(game: game)
                .preferredColorScheme(.light)
            
        }
        
    }
    
    
}

